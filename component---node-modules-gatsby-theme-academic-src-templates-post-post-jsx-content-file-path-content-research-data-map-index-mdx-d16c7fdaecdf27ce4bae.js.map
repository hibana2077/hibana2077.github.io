{"version":3,"file":"component---node-modules-gatsby-theme-academic-src-templates-post-post-jsx-content-file-path-content-research-data-map-index-mdx-d16c7fdaecdf27ce4bae.js","mappings":"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","sources":["webpack://example/./content/research/DataMap/index.mdx","webpack://example/./node_modules/gatsby-theme-academic/src/templates/post/post.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"brief-summary\"\n  }, React.createElement(_components.a, {\n    \"aria-hidden\": \"true\",\n    tabIndex: \"-1\",\n    href: \"#brief-summary\"\n  }, React.createElement(_components.span, {\n    className: \"icon icon-link\"\n  })), \"Brief Summary\"), \"\\n\", React.createElement(_components.p, null, \"In this study, we explore the feasibility of applying Data Cartography techniques to tree-based models. Originally designed for classification tasks in large language models, we innovatively adapted these techniques for use with tree-based models such as random forests. This transfer application represents a significant innovation and contribution in terms of model applicability and efficiency, offering a new approach to data analysis and processing for tree-based models. Our research methodology begins by establishing a foundational model based on Data Cartography techniques, opting for a simpler model structure compared to the neural networks used in the original research to better suit the characteristics of tree-based models. We then utilize this foundational model to segment the dataset into three difficulty levels: hard-to-learn, medium-difficulty, and easy-to-learn data. This classification not only enhances the efficiency of model training but also allows us to select more suitable model strategies for different data difficulty levels. Following the classification, we use the model from the first step as the base model to further model the segmented dataset. During this process, we particularly emphasize the application of stacking techniques to improve overall model performance. Our results demonstrate that this approach can effectively enhance the predictive capability of tree-based models on complex datasets, proving the innovative value and practicality of Data Cartography techniques in the context of tree-based model applications.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"citation\"\n  }, React.createElement(_components.a, {\n    \"aria-hidden\": \"true\",\n    tabIndex: \"-1\",\n    href: \"#citation\"\n  }, React.createElement(_components.span, {\n    className: \"icon icon-link\"\n  })), \"Citation\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">@INPROCEEDINGS<span class=\\\"token punctuation\\\">{</span>Li2024-potential,\\n  title      <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"A potential study on the application of data cartography\\n                techniques to tree-based models: A methodological approach\\\"</span>,\\n  booktitle  <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Proceedings of the 2024 2nd International Conference on Machine\\n                Learning and Pattern Recognition\\\"</span>,\\n  author     <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Li, Syuan-Hao and Huang, Yi-Jui and Li, Jie-Xin and Ting,\\n                Jing-Yuan\\\"</span>,\\n  publisher  <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"ACM\\\"</span>,\\n  pages      <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"15--19\\\"</span>,\\n  month      <span class=\\\"token operator\\\">=</span>  aug,\\n  year       <span class=\\\"token operator\\\">=</span>  <span class=\\\"token number\\\">2024</span>,\\n  address    <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"New York, NY, USA\\\"</span>,\\n  conference <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"MLPR 2024: 2024 the 2nd International Conference on Machine\\n                Learning and Pattern Recognition\\\"</span>,\\n  location   <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Osaka Japan\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/hibana2077.github.io/hibana2077.github.io/content/research/DataMap/index.mdx\";\nimport {useLocation} from '@gatsbyjs/reach-router';\nimport {graphql} from 'gatsby';\nimport {GatsbyImage, getImage} from 'gatsby-plugin-image';\nimport moment from 'moment';\nimport React, {useState, useEffect, useContext} from 'react';\nimport {Panel, Row, Col, Input, Message, FlexboxGrid, InputGroup, Grid} from 'rsuite';\nimport nacl from 'tweetnacl';\nimport naclUtil from 'tweetnacl-util';\nimport CodeBox from '../../components/CodeBox';\nimport Comment from '../../components/Comment';\nimport SEO from '../../components/Seo';\nimport Context from '../../utils/context';\nimport {useSiteMetadata} from '@/utils/hooks';\nimport Utils from '../../utils/pageUtils.mjs';\nimport './highlight-syntax.less';\nimport Icon from '@/components/Icon';\nfunction Post({data: {mdx}, children}) {\n  const {fields: {slug: {html, nonce, htmlEncrypted, title, excerpt, path, date, commit, type}}, frontmatter: {cover}, tableOfContents} = mdx;\n  const editTime = moment.unix(commit).format('MMM Do YYYY');\n  const postTime = Utils.formatDate(date);\n  const image = cover ? getImage(cover) : null;\n  const siteMetadata = useSiteMetadata();\n  const canonicalUrl = Utils.generateFullUrl(siteMetadata, path);\n  console.log(nonce);\n  const [state, setState] = useState({\n    locked: nonce !== '',\n    failed: false,\n    html\n  });\n  const [passwordVisible, setPasswordVisible] = React.useState(false);\n  const [password, setPassword] = React.useState('');\n  const handlePasswordVisibleChange = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n  const handlePasswordChange = value => {\n    setPassword(value);\n  };\n  const onUnlock = () => {\n    if (state.locked) {\n      try {\n        const passwordDecoded = naclUtil.decodeUTF8(password);\n        const nonceBuffer = naclUtil.decodeBase64(nonce);\n        const keyBuffer = nacl.hash(passwordDecoded).slice(0, nacl.secretbox.keyLength);\n        const box = naclUtil.decodeBase64(htmlEncrypted);\n        const htmlBuffer = nacl.secretbox.open(box, nonceBuffer, keyBuffer);\n        const htmlReal = naclUtil.encodeUTF8(htmlBuffer);\n        setState({\n          locked: false,\n          failed: false,\n          html: htmlReal\n        });\n      } catch (e) {\n        setState({\n          locked: true,\n          failed: true,\n          html: ''\n        });\n      }\n    }\n  };\n  const time = [];\n  if (postTime) {\n    time.push(`Posted: ${postTime}`);\n  }\n  if (commit > 0 && postTime !== editTime) {\n    time.push(`Edited: ${editTime}`);\n  }\n  const context = useContext(Context);\n  const location = useLocation();\n  useEffect(() => {\n    if (context && context.setState && Object.getOwnPropertyNames(tableOfContents).length) {\n      context.setState({\n        tableOfContents,\n        pathname: location.pathname\n      });\n    }\n  }, []);\n  const EncryptedBody = () => {\n    return state.locked ? React.createElement(Panel, {\n      description: \"\"\n    }, React.createElement(Grid, {\n      fluid: true\n    }, React.createElement(Row, {\n      justify: \"center\",\n      type: \"flex\"\n    }, React.createElement(Col, {\n      xs: 24,\n      sm: 24,\n      md: 24,\n      lg: 16,\n      xl: 12\n    }, state.failed ? React.createElement(Message, {\n      type: \"error\"\n    }, \"Wrong password! Please try again.\") : React.createElement(Message, {\n      type: \"info\"\n    }, \"This article is encrypted by xsalsa20-poly1305 algorithm.\"), React.createElement(InputGroup, {\n      style: {\n        marginTop: '1rem'\n      }\n    }, React.createElement(Input, {\n      type: passwordVisible ? 'text' : 'password',\n      value: password,\n      placeholder: \"Enter password to unlock this article.\",\n      onPressEnter: onUnlock,\n      onChange: handlePasswordChange,\n      size: \"lg\"\n    }), React.createElement(InputGroup.Button, {\n      onClick: handlePasswordVisibleChange\n    }, passwordVisible ? React.createElement(Icon, {\n      icon: \"eye\"\n    }) : React.createElement(Icon, {\n      icon: \"eye-slash\"\n    }))))))) : React.createElement(\"article\", {\n      className: \"markdown-body\"\n    }, children);\n  };\n  const PublicBody = () => {\n    return React.createElement(\"article\", {\n      className: \"markdown-body\"\n    }, children);\n  };\n  return React.createElement(React.Fragment, null, React.createElement(SEO, {\n    title: title,\n    description: excerpt,\n    path: path,\n    keywords: ['FullStack developer', 'Javascript', 'ReactJS', 'NodeJS', 'Gatsby', 'technology']\n  }), React.createElement(\"div\", null, React.createElement(\"div\", {\n    className: \"marginTopTitle\"\n  }, React.createElement(\"h1\", {\n    className: \"titleSeparate\"\n  }, title)), React.createElement(\"div\", {\n    style: {\n      color: 'var(--rs-text-tertiary)',\n      marginBottom: '1rem'\n    }\n  }, time.join(', ')), React.createElement(FlexboxGrid, {\n    style: {\n      marginBottom: '1rem'\n    }\n  }, React.createElement(FlexboxGrid.Item, {\n    as: Col,\n    xs: 24,\n    sm: 24,\n    md: image ? 12 : 24,\n    lg: image ? 16 : 24\n  }, React.createElement(CodeBox, {\n    title: \"Abstract\",\n    style: {\n      height: '100%'\n    }\n  }, React.createElement(\"p\", {\n    style: {\n      marginBottom: '0'\n    },\n    dangerouslySetInnerHTML: {\n      __html: Utils.parseMarkDown(excerpt, true)\n    }\n  }))), image ? React.createElement(FlexboxGrid.Item, {\n    as: Col,\n    xs: 24,\n    sm: 24,\n    md: 12,\n    lg: 8\n  }, React.createElement(\"div\", {\n    style: {\n      height: '100%'\n    }\n  }, React.createElement(GatsbyImage, {\n    image: image,\n    title: title,\n    alt: title\n  }))) : null), nonce === '' ? React.createElement(PublicBody) : React.createElement(EncryptedBody)), type === 'posts' ? React.createElement(\"div\", {\n    style: {\n      marginTop: '2rem'\n    }\n  }, React.createElement(Comment, {\n    pageCanonicalUrl: canonicalUrl,\n    pageId: title\n  })) : null);\n}\nexport const pageQuery = graphql`\n  query($contentFilePath: String!) {\n    mdx(internal: { contentFilePath: { eq: $contentFilePath } }) {\n      tableOfContents\n      frontmatter {\n        cover {\n          childImageSharp {\n            gatsbyImageData(\n              layout: CONSTRAINED\n              width: 1000\n            )\n          }\n        }\n      }\n      fields {\n        slug {\n          html\n          htmlEncrypted\n          nonce\n          timeToRead\n          title\n          date\n          tags\n          path\n          excerpt\n          links { \n            name\n            url\n          }\n          commit\n          type\n        }\n      }\n      internal {\n        contentFilePath\n      }\n    }\n  }\n`;\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","span","p","_provideComponents","components","React","id","tabIndex","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","Post","_ref","data","mdx","children","fields","slug","html","nonce","htmlEncrypted","title","excerpt","path","date","commit","type","frontmatter","cover","tableOfContents","editTime","moment","format","postTime","Utils","formatDate","image","getImage","siteMetadata","useSiteMetadata","canonicalUrl","generateFullUrl","console","log","state","setState","useState","locked","failed","passwordVisible","setPasswordVisible","password","setPassword","handlePasswordVisibleChange","handlePasswordChange","value","onUnlock","passwordDecoded","naclUtil","nonceBuffer","keyBuffer","nacl","slice","keyLength","box","htmlBuffer","open","htmlReal","e","time","push","context","useContext","Context","location","useLocation","useEffect","getOwnPropertyNames","length","pathname","EncryptedBody","Panel","description","Grid","fluid","Row","justify","Col","xs","sm","md","lg","xl","Message","InputGroup","style","marginTop","Input","placeholder","onPressEnter","onChange","size","Button","onClick","Icon","icon","PublicBody","SEO","keywords","color","marginBottom","join","FlexboxGrid","Item","as","CodeBox","height","parseMarkDown","GatsbyImage","alt","Comment","pageCanonicalUrl","pageId","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}